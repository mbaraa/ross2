package postsgen

import (
	"bytes"
	"io"
	"testing"

	"github.com/mbaraa/ross2/models"
)

/*
	I have no idea if these tests are needed or not, or whether that they work at all!
	I just wanted to write a test :)
*/

var (
	base  = ""
	teams = []models.Team{
		{
			Name:    "The Flesh Curtains",
			Members: []models.Contestant{{Name: "Rick Sanchez"}, {Name: "Birdperson"}, {Name: "Squanchy"}},
		},
		{
			Name:    "Vindicators World Savers",
			Members: []models.Contestant{{Name: "Alan Rails"}, {Name: "Supernova"}, {Name: "Crocubot"}},
		},
		{
			Name:    "The Whirly Dirly HeadQuarters",
			Members: []models.Contestant{{Name: "Risotto Groupon"}, {Name: "Shnoopy Bloopers"}, {Name: "Jerry Smith"}},
		},
	}
	pg = NewTeamsPostsGenerator(teams, TextFieldProps{Position: Point2{111, 140}, XWidth: 369, FontSize: 30},
		[]TextFieldProps{
			{Position: Point2{73, 210}, XWidth: 447, FontSize: 25},
			{Position: Point2{73, 272}, XWidth: 447, FontSize: 25},
			{Position: Point2{73, 333}, XWidth: 447, FontSize: 25},
		}, base)
)

func TestTeamPostsGenerator_GenerateToZipFile(t *testing.T) {
	zipFile, err := pg.GenerateToZipFile()
	if err != nil {
		t.Fatal(err)
	}

	defer func() { _ = zipFile.Close() }()

	posts, err := pg.GenerateToB64Images()
	if err != nil {
		t.Fatal(err)
	}

	pz, err := NewPostsZipper(posts)
	if err != nil {
		t.Fatal(err)
	}

	zipFile2, err := pz.MakeZipFile()
	if err != nil {
		t.Fatal(err)
	}
	defer func() { _ = zipFile2.Close() }()

	read, err := io.ReadAll(zipFile)
	if err != nil {
		t.Fatal(err)
	}

	read2, err := io.ReadAll(zipFile2)
	if err != nil {
		t.Fatal(err)
	}

	if bytes.Compare(read2, read) != 0 {
		t.Fatalf("len(read): %d != len(read2): %d", len(read), len(read2))
	}
}

func TestTeamPostsGenerator_GenerateToZipFileBytes(t *testing.T) {
	zipBytes, err := pg.GenerateToZipFileBytes()
	if err != nil {
		t.Fatal(err)
	}

	posts, err := pg.GenerateToB64Images()
	if err != nil {
		t.Fatal(err)
	}

	pz, err := NewPostsZipper(posts)
	if err != nil {
		t.Fatal(err)
	}

	zipFile, err := pz.MakeZipFile()
	if err != nil {
		t.Fatal(err)
	}
	defer func() { _ = zipFile.Close() }()

	read, err := io.ReadAll(zipFile)
	if err != nil {
		t.Fatal(err)
	}

	if bytes.Compare(zipBytes, read) != 0 {
		t.Fatalf("len(read): %d != len(zipBytes): %d", len(read), len(zipBytes))
	}

	_ = zipFile.Close()
}
